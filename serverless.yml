service: api-crud

provider:
  name: aws
  runtime: nodejs14.x
  iam:
    role:
      statements: 
        - Effect: Allow
          Action: "dynamodb:*"
          Resource: 
            - arn:aws:dynamodb:us-east-1:536729514546:table/usersTable
            - arn:aws:sts::536729514546:table/usersTable

plugins:
  - serverless-apigateway-service-proxy
  - serverless-lift
package:
  individually: true
  patterns:
    - "!*/**"
    - "!**"

custom:	
  dynamodb:	
    stages:	
      - dev	
    start:	
      port: 8000	
      inMemory: true
      migrate: true	
  apiGatewayServiceProxies:	
    - sqs:
        path: /likeUser	
        method: post	
        queueName: likeuser-queue
        cors: true	
        response:	
          template:	
            # `success` is used when the integration response is 200
            success: |-
              { "message": "accepted" }              
            # `clientError` is used when the integration response is 400	
            clientError: |-
              { "message": "there is an error in your request" }	
            # `serverError` is used when the integration response is 500	
            serverError: |-
              { "message": "there was an error handling your request" }

constructs:
  sql-likeuser-queue:
    type: queue
    # cuantas tareas de la cola se van a ejecutar al mismo tiempo
    batchSize: 1
    worker:
      handler: likeUser/handler.likeUser
      # cuantas instancias de lambda van a ejeutarse
      reservedConcurrency: 1
      package:    
        patterns:
          - "likeUser/handler.js"
    extensions:
      queue:
        Properties:
          QueueName: likeuser-queue


functions:
  get-users:
    handler: getUsers/handler.getUsers
    package:    
      patterns:
        - "getUsers/handler.js"
    events:
      - http:
          path: users/{id}
          method: GET     

  get-all-users:
    handler: getAllUsers/handler.getAllUsers
    package:    
      patterns:
        - "getAllUsers/handler.js"
    events:
      - http:
          path: users
          method: GET              

  create-users:
    handler: createUsers/handler.createUsers
    package:    
      patterns:
        - "createUsers/handler.js"
    events:
      - http:
          path: users
          method: POST     

  update-users:
    handler: updateUsers/handler.updateUsers
    package:    
      patterns:
        - "updateUsers/handler.js"
    events:
      - http:
          path: users/{id}
          method: PATCH  

  delete-users:
    handler: deleteUsers/handler.deleteUsers
    package:    
      patterns:
        - "deleteUsers/handler.py"
    runtime: python3.8
    events:
      - http:
          path: users/{id}
          method: DELETE               

resources: 
  Resources:	
    usersTable:
      Type: AWS::DynamoDB::Table	
      Properties:	
        TableName: usersTable	
        AttributeDefinitions:
          - AttributeName: pk	
            AttributeType: S
        KeySchema:	
          - AttributeName: pk	
            KeyType: HASH	
        ProvisionedThroughput:	
          ReadCapacityUnits: 1	
          WriteCapacityUnits: 1          