service: project-api

provider:
  name: aws
  runtime: nodejs14.x
  apiGateway:
    apiKeys:
      - project-api-key
  iam:
    role:
      statements: 
        - Effect: Allow
          Action: "dynamodb:*"
          Resource: arn:aws:dynamodb:us-east-1:536729514546:table/usersTable

        - Effect: Allow
          Action: "S3:*"
          Resource: arn:aws:s3:::bucket-api-serverless-js/*

  environment:
    BUCKET: ${ssm:/BUKET_NAME_SERVERLESS_API_DEV}
    # accedemos al secret del system manager
    SECRET_EGG: ${ssm:/SECRET_EGG}
    EXPIRES_TIME: 300
	
package:
  individually: true
  patterns:
    - "!*/**"
    - "!**"

custom:	
  dynamodb:	
    stages:	
      - dev	
    start:	
      port: 8000	
      inMemory: true
      migrate: true	

  s3:
    host: localhost	
    directory: /tmp    

functions:
  # la funcion authorizer será usada por api gateway para validar la autenticación
  custom-authorizer:
    handler: authorizer/handler.authorize
    package:    
      patterns:
        - "authorizer/handler.js"

  get-users:
    handler: getUsers/handler.getUsers
    package:    
      patterns:
        - "getUsers/handler.js"
    events:
      - http:
          # con la instrucción private habilitamos para usar apikey
          private: true
          path: users/{id}
          method: GET     
          request:
            parameters:
              paths:
                id: true

  get-all-users:
    handler: getAllUsers/handler.getAllUsers
    package:    
      patterns:
        - "getAllUsers/handler.js"
    events:
      - http:
          path: users
          method: GET              

  create-users:
    handler: createUsers/handler.createUsers    
    package:    
      patterns:
        - "createUsers/handler.js"
    events:
      - http:
          path: users
          authorizer:
            name: custom-authorizer
            resultTtlInSeconds: 15
          method: POST    
          request:
            schemas: 
              application/json: ${file(schemas/user-schema.json)} 

  update-users:
    handler: updateUsers/handler.updateUsers
    package:    
      patterns:
        - "updateUsers/handler.js"
    events:
      - http:
          path: users/{id}
          method: PATCH  
          request:
            parameters:
              paths:
                id: true
            schemas: 
              application/json: ${file(schemas/user-schema.json)}     

  delete-users:
    handler: deleteUsers/handler.deleteUsers
    package:    
      patterns:
        - "deleteUsers/handler.py"
    runtime: python3.8
    events:
      - http:
          path: users/{id}
          method: DELETE     
          request:
            parameters:
              paths:
                id: true     

  signed-url:
    handler: signedUrl/handler.signedS3URL
    package:    
      patterns:
        - "signedUrl/handler.js"    
    events:
      - http:
          path: signedurl
          method: GET     
          request:
            parameters:
              querystrings:
                filename: true                

  thumbnail-generator:
    handler: thumbnail/handler.thumbnailGenerator
    layers:
      - { Ref: BaseLambdaLayer }
    package:    
      patterns:
        - "thumbnail/handler.js"            
    events:
      - s3:
          bucket: bucket-api-serverless-js
          event: s3:ObjectCreated:*
          existing: true
          rules: 
            - prefix: upload/

# automatizar la subida de una layer
layers:
  base:
    name: "dev-thumbnail-layer"
    compatibleRuntimes:
      - "nodejs14.x"
    package:
      artifact: app/nodejs.zip


resources: 
  Resources:	
    usersTable:
      Type: AWS::DynamoDB::Table	
      Properties:	
        TableName: usersTable	
        AttributeDefinitions:
          - AttributeName: pk	
            AttributeType: S
        KeySchema:	
          - AttributeName: pk	
            KeyType: HASH	
        ProvisionedThroughput:	
          ReadCapacityUnits: 1	
          WriteCapacityUnits: 1       

    S3Bucket:
      Type: 'AWS::S3::Bucket'
      Properties:
        AccessControl: PublicRead
        BucketName: bucket-api-serverless-js

    SampleBucketPolicy:
      Type: AWS::S3::BucketPolicy
      Properties:
        Bucket: !Ref S3Bucket
        PolicyDocument:
          Version: "2012-10-17"
          Statement:
            - Action:
                - 's3:GetObject'
              Effect: Allow
              Resource: !Join
                - ''
                - - 'arn:aws:s3:::'
                  - !Ref S3Bucket
                  - /*
              Principal: '*'